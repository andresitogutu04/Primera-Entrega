language: python

# Here we use anaconda for 2.6 and 3.3, since it provides the simplest
# interface for running different versions of Python. We could also use
# it for 2.7, but the Ubuntu system has installable 2.7 Qt4-GL, which
# allows for more complete testing.


virtualenv:
    system_site_packages: true


env:
    # Enable python 2 and python 3 builds
    # Note that the 2.6 build doesn't get flake8, and runs old versions of
    # Pyglet and GLFW to make sure we deal with those correctly
    - PYTHON=2.6 DEPS=full TEST=standard  # functionality
    - PYTHON=2.7 DEPS=full TEST=standard
    - PYTHON=2.7 DEPS=minimal TEST=standard
    - PYTHON=3.3 DEPS=full TEST=standard
    - PYTHON=3.3 DEPS=minimal TEST=extra  # test file sizes, style, line endings


before_install:
    - travis_retry sudo apt-get -qq update;
    - if [ "${PYTHON}" != "2.7" ]; then
        wget http://repo.continuum.io/miniconda/Miniconda-2.2.2-Linux-x86_64.sh -O miniconda.sh;
        chmod +x miniconda.sh;
        ./miniconda.sh -b;
        export PATH=/home/$USER/anaconda/bin:$PATH;
        conda update --yes conda;
        travis_retry sudo apt-get -qq -y install libgl1-mesa-dri;
      fi;

    - SRC_DIR=$(pwd)
    # file size checks
    - if [ "${TEST}" == "extra" ]; then
        if [ "${TRAVIS_PULL_REQUEST}" != "false" ]; then
          GIT_TARGET_EXTRA="+refs/heads/${TRAVIS_BRANCH}";
          GIT_SOURCE_EXTRA="+refs/pull/${TRAVIS_PULL_REQUEST}/merge";
        else
          GIT_TARGET_EXTRA="";
          GIT_SOURCE_EXTRA="";
        fi;
        cd ~;
        mkdir target-size-clone && cd target-size-clone &&
        git init && git remote add -t ${TRAVIS_BRANCH} origin git://github.com/${TRAVIS_REPO_SLUG}.git &&
        git fetch origin ${GIT_TARGET_EXTRA} && 
        git checkout -qf FETCH_HEAD && 
        git tag travis-merge-target &&
        git gc --aggressive &&
        TARGET_SIZE=`du -s . | sed -e "s/\t.*//"` &&
        git pull origin ${GIT_SOURCE_EXTRA} && 
        git gc --aggressive &&
        MERGE_SIZE=`du -s . | sed -e "s/\t.*//"`;
      fi;
    
    - if [ "${TEST}" == "extra" ]; then
        if [ "${MERGE_SIZE}" != "${TARGET_SIZE}" ]; then
          SIZE_DIFF=`expr \( ${MERGE_SIZE} - ${TARGET_SIZE} \)`;
        else
          SIZE_DIFF=0;
        fi;
      fi;
      
    - cd ${SRC_DIR}
    
    # to aid in debugging
    - echo ${TRAVIS_BRANCH}
    - echo ${TRAVIS_REPO_SLUG}
    - echo ${GIT_TARGET_EXTRA}
    - echo ${GIT_SOURCE_EXTRA}


install:
    # Install numpy, nose, flake
    - if [ "${PYTHON}" != "2.7" ]; then
        conda create -n testenv --yes --quiet pip python=$PYTHON;
        source activate testenv;
        conda install --yes --quiet numpy nose;
      else
        travis_retry sudo apt-get -qq -y install python-numpy python-nose;
      fi;
    - pip install -q coveralls nose-timer
    # Dont install flake8 on 2.6 to make sure tests still run without it
    - if [ "${PYTHON}" != "2.6" ]; then
        pip install -q flake8;
      fi

    # Install PyOpenGL
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" == "2.7" ]; then
          echo "Using OpenGL stable version (repos)";
          travis_retry sudo apt-get -qq -y install python-opengl;
        else
          echo "Using OpenGL stable version (pip)";
          pip install -q PyOpenGL;
        fi;
      fi;

    # Use Pyglet alpha to get Py3.3 support
    # Test old (insufficient) version of Pyglet on 2.6
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" == "2.6" ]; then
          pip install -q pyglet;
        else
          pip install -q http://pyglet.googlecode.com/archive/tip.zip;
        fi;
        if [ "${PYTHON}" == "3.3" ]; then
          conda install --yes --quiet -c https://conda.binstar.org/pyzo pyside-pyzo;
          conda install --yes --quiet pillow;
        fi;
        if [ "${PYTHON}" == "2.7" ]; then
          travis_retry sudo apt-get -qq -y install python-qt4-gl python-imaging;
        fi;
      fi;

    # Install vispy
    - python setup.py build
    - python setup.py install
    - SRC_DIR=$(pwd)
    - cd ~

    # GLFW: version 2 shouldn't work (so let's try on Py2.6), version 3 will
    - if [ "${PYTHON}" == "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install libglfw2;
      fi
    - if [ "${PYTHON}" != "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install xorg-dev libglu1-mesa-dev;
        git clone git://github.com/glfw/glfw.git;
        cd glfw;
        cmake -DBUILD_SHARED_LIBS=true -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false .;
        sudo make install;
      fi
    - sudo ldconfig

    # We will run tests from vispy dir to test our install worked
    - VISPY_DIR=$(python -c 'import vispy;print(vispy.__path__[0])')
    - ln -s ${SRC_DIR}/.coveragerc ${VISPY_DIR}/../.coveragerc
    - ln -s ${SRC_DIR}/setup.cfg ${VISPY_DIR}/../setup.cfg
    # Link coverage to src dir, coveralls should be run from there (needs git calls)
    - ln -s ${VISPY_DIR}/../.coverage ${SRC_DIR}/.coverage
    - echo ${VISPY_DIR}
    - echo ${SRC_DIR}


before_script:
    # We need to create a (fake) display on Travis, let's use a funny resolution
    - export DISPLAY=:99.0
    - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render
    
    # Help color output from each test
    - RESET='\033[0m';
      RED='\033[00;31m';
      GREEN='\033[00;32m';
      YELLOW='\033[00;33m';
      BLUE='\033[00;34m';
      PURPLE='\033[00;35m';
      CYAN='\033[00;36m';
      WHITE='\033[00;37m';
      start_test() {
        echo -e "${BLUE}======== Starting $1 ========${RESET}";
      };
      check_output() {
        ret=$?;
        if [ $ret == 0 ]; then
            echo -e "${GREEN}>>>>>>    $1 passed    <<<<<<${RESET}";
        else
            echo -e "${RED}>>>>>>    $1 FAILED    <<<<<<${RESET}";
        fi;
        return $ret;
      };
    


script:
    - # Nose-timer has bugs on 3+ as of Jan 2014
    - cd ${VISPY_DIR}/../;
      if [ "${TEST}" != "extra" ]; then
        start_test "unit tests";
        if [ "${PYTHON}" == "2.7" ]; then
          nosetests --with-timer --timer-top-n 10;
        else
          nosetests;
        fi;
        check_output "unit tests"
      fi;
      
    # Require strict adherence to PEP8 and pyflakes (can use "# noqa" to skip)
    - cd ${SRC_DIR};
      if [ "${TEST}" == "extra" ]; then
        start_test "style tests";
        cwd=`pwd` &&
        mkdir ../flake_test &&
        cd ../flake_test &&
        git init -q &&
        git remote add -t ${TRAVIS_BRANCH} origin git://github.com/${TRAVIS_REPO_SLUG}.git &&
        git fetch -q origin ${GIT_TARGET_EXTRA} &&
        git checkout -qf FETCH_HEAD &&
        git tag travis_flake_target &&
        git fetch -q origin ${GIT_SOURCE_EXTRA} &&
        git checkout -qf FETCH_HEAD &&
        git reset -q travis_flake_target &&
        make flake_diff &&
        cd $cwd;
        check_output "style tests";
      fi; 
      
    - if [ "${TEST}" == "extra" ]; then
        start_test "line endings check";
        make lineendings;
        check_output "line endings check";
      fi;
      
    - if [ "${TEST}" == "extra" ]; then
        start_test "repository size test";
        echo -e "Estimated content size difference = ${SIZE_DIFF} kB";
        test ${SIZE_DIFF} -lt 100;
        check_output "repository size test";
      fi;
      



after_success:
    # Need to run from source dir to execute appropriate "git" commands
    # Let's use the "full" test case for coveralls, best case for coverage
    - start_test "coverage test";
      if [ "${PYTHON}" == "2.7" ] && [ "${DEPS}" == "full" ] && [ "${TEST}" != "extra" ]; then
        echo "Running coveralls";
        cd ${SRC_DIR};
        coveralls;
      fi;
