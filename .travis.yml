language: python

# use container-based infrastructure
dist: trusty

# liblgfw2 is not whitelisted by Travis, so we don't try using it here (not usable anyway)
addons:
  apt:
    packages:
    - &mesa_apt [libgl1-mesa-dri]
    - &full_apt [libgl1-mesa-dri, libegl1-mesa, cmake, xorg-dev, libglu1-mesa-dev, mercurial, libdbus-1-dev, libgl1-mesa-dev, libglu1-mesa-dev, libpulse-dev, libx11-dev, libxcursor-dev, libxext-dev, libxi-dev, libxinerama-dev, libxrandr-dev, libxss-dev, libxt-dev, libxv-dev, libxxf86vm-dev, libasound2-dev, libts-dev, libudev-dev, libsdl2-2.0-0]
    - &python_apt [python3-pip, python3-numpy, python3-opengl, python3-scipy, python3-networkx, python3-sdl2, python3-matplotlib, python3-jupyter-client, python3-jupyter-core, python3-jupyter-console, python3-jupyter-notebook, python3-pyqt4, python3-pil, python3-decorator, python3-six, python3-skimage, python3-nose, python3-pytest, cython3, python3-flake8, python3-mock]
# Size testing can be skipped by adding "[size skip]" within a commit message.

matrix:
  include:
    # OSMesa requires a specific Travis run because since the system also
    # has (on-screen) OpenGL installed, we need to setup environment variable
    # to avoid having the linker load the wrong libglapi.so which would cause
    # OSMesa to crash
    - python: 3.6
      env:
        - PYTHON=3.6 DEPS=full TEST=osmesa
      addons:
        apt:
          packages:
            - *full_apt
            - *python_apt


before_install:
    #- wget -q http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
    #- chmod +x miniconda.sh
    #- ./miniconda.sh -b -p ~/anaconda
    #- export PATH=~/anaconda/bin:$PATH
    #- conda config --add channels conda-forge
    #- conda update --yes --quiet conda
    - SRC_DIR=$(pwd)

install:
    # Install numpy, flake
    #- conda create -n testenv --yes --quiet pip python=$PYTHON pyopengl scipy numpy networkx numpydoc pysdl2 matplotlib jupyter pyqt=4 pillow decorator six scikit-image nose pytest cython coveralls pytest-cov pytest-sugar flake8 mock;
    #- source activate testenv;
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        pip install numpydoc coveralls pytest-cov pytest-sugar;
      fi;

    # On Python3, install system-wide copies of bundled libraries instead
    # Also install PyQt4, imaging (PIL or pillow), scipy, mpl, egl
    # On conda, can't install pyside-pyzo b/c it conflicts with pyqt4,
    # which is required by matplotlib :(
    # wxpython available from conda-forge but not for OSX:
    #     https://github.com/conda-forge/wxpython-feedstock/issues/2
    # If we only need a single backend (DEPS=backend), then use PyQT4
    # Don't test Pyglet because it currently segfaults (but AppVeyor checks it)
    # PyQt5 is currently broken, but will be installed on 3.6 so don't do it
    # WX requires OSMesa (mesa on conda) which has typically been an
    # additional test environment. With llvm=3.3 the combination of
    # EGL and mesa causes segmentation faults. See issue #1401.
    #- if [ "${DEPS}" == "full" ]; then
    #    conda install --yes pyopengl scipy numpy$NUMPY networkx;
    #    pip install -q numpydoc PySDL2;
    #    conda install --yes matplotlib jupyter pyqt=4 pillow decorator six scikit-image;
    #    if [ "${PYTHON}" == "3.6" ]; then
    #      pip install -q freetype-py husl pypng cassowary imageio;
    #      rm -rf ${SRC_DIR}/vispy/ext/_bundled;
    #    else
    #      pip install -q mock;
    #    fi;
    #  fi;

    # Install vispy
    - cd ${SRC_DIR}
    - python setup.py install
    - python setup.py develop
    - cd ~

    # Install glfw (fails with virtual buffer on OSX)
    - if [ "${DEPS}" == "full" ] && [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        git clone git://github.com/glfw/glfw.git;
        cd glfw;
        cmake -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_INSTALL_LIBDIR:PATH=$CONDA_PREFIX/lib -DGLFW_CONTEXT_CREATION_API=GLFW_OSMESA_CONTEXT_API -DBUILD_SHARED_LIBS=true -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false .;
        make install;
        cd ~;
        export GLFW_LIBRARY=${CONDA_PREFIX}/lib/libglfw.so;
      fi

    # Install OSMesa
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        wget https://github.com/vispy/demo-data/raw/master/osmesa/osmesa_11.0.0_12.04.tar.bz2 -O /tmp/osmesa.tar.bz2;
        mkdir $HOME/osmesa; tar -xvjf /tmp/osmesa.tar.bz2 -C $HOME/osmesa;
      fi;


before_script:
    # We need to create a (fake) display on Travis, let's use a funny resolution
    # For OSX: https://github.com/travis-ci/travis-ci/issues/7313#issuecomment-279914149
    - if [ "${TEST}" == "osmesa" ]; then
        export LD_LIBRARY_PATH=$HOME/osmesa/lib;
        export LIBRARY_PATH=$HOME/osmesa/lib;
        export VISPY_GL_LIB=$HOME/osmesa/lib/libOSMesa.so;
        export OSMESA_LIBRARY=$HOME/osmesa/lib/libOSMesa.so;
      fi;

script:
    - cd ${SRC_DIR}
    - python -c "import vispy; print(vispy.sys_info())"
    - if [ "${TEST}" == "osmesa" ]; then
        make osmesa;
      fi;
