language: python

# Here we use anaconda for 2.6 and 3.3, since it provides the simplest
# interface for running different versions of Python. We could also use
# it for 2.7, but the Ubuntu system has installable 2.7 Qt4-GL, which
# allows for more complete testing.


virtualenv:
    system_site_packages: true


env:
    # Enable python 2 and python 3 builds
    # Note that the 2.6 build doesn't get flake8, and runs old versions of
    # Pyglet and GLFW to make sure we deal with those correctly
    - PYTHON=2.6 DEPS=full
    - PYTHON=2.7 DEPS=full
    - PYTHON=2.7 DEPS=minimal
    - PYTHON=3.3 DEPS=full


before_install:
    - travis_retry sudo apt-get -qq update;
    - if [ "${PYTHON}" != "2.7" ]; then
        wget http://repo.continuum.io/miniconda/Miniconda-2.2.2-Linux-x86_64.sh -O miniconda.sh;
        chmod +x miniconda.sh;
        ./miniconda.sh -b;
        export PATH=/home/$USER/anaconda/bin:$PATH;
        conda update --yes conda;
        travis_retry sudo apt-get -qq -y install libgl1-mesa-dri;
      fi;


install:
    # Install numpy, nose, flake
    - if [ "${PYTHON}" != "2.7" ]; then
        conda create -n testenv --yes --quiet pip python=$PYTHON;
        source activate testenv;
        conda install --yes --quiet numpy nose;
      else
        travis_retry sudo apt-get -qq -y install python-numpy python-nose;
      fi;
    - pip install -q coveralls nose-timer
    # Dont install flake8 on 2.6 to make sure tests still run without it
    - if [ "${PYTHON}" != "2.6" ]; then
        pip install -q flake8;
      fi

    # Install PyOpenGL
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" == "2.7" ]; then
          echo "Using OpenGL stable version (repos)";
          travis_retry sudo apt-get -qq -y install python-opengl;
        else
          echo "Using OpenGL stable version (pip)";
          pip install -q PyOpenGL;
        fi;
      fi;

    # Use Pyglet alpha to get Py3.3 support
    # Test old (insufficient) version of Pyglet on 2.6
    - if [ "${DEPS}" == "full" ]; then
        if [ "${PYTHON}" == "2.6" ]; then
          pip install -q pyglet;
        else
          pip install -q http://pyglet.googlecode.com/archive/tip.zip;
        fi;
        if [ "${PYTHON}" == "3.3" ]; then
          conda install --yes --quiet -c https://conda.binstar.org/pyzo pyside-pyzo;
          conda install --yes --quiet pillow;
        fi;
        if [ "${PYTHON}" == "2.7" ]; then
          travis_retry sudo apt-get -qq -y install python-qt4-gl python-imaging;
        fi;
      fi;
    
    # Install vispy
    - python setup.py build
    - python setup.py install
    - SRC_DIR=$(pwd)
    - cd ~

    # GLFW: version 2 shouldn't work (so let's try on Py2.6), version 3 will
    - if [ "${PYTHON}" == "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install libglfw2;
      fi
    - if [ "${PYTHON}" != "2.6" ] && [ "${DEPS}" == "full" ]; then
        travis_retry sudo apt-get -qq install xorg-dev libglu1-mesa-dev;
        git clone git://github.com/glfw/glfw.git;
        cd glfw;
        cmake -DBUILD_SHARED_LIBS=true -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false .;
        sudo make install;
      fi
    - sudo ldconfig

    # We will run tests from vispy dir to test our install worked
    - VISPY_DIR=$(python -c 'import vispy;print(vispy.__path__[0])')
    - ln -s ${SRC_DIR}/.coveragerc ${VISPY_DIR}/../.coveragerc
    - ln -s ${SRC_DIR}/setup.cfg ${VISPY_DIR}/../setup.cfg
    # Link coverage to src dir, coveralls should be run from there (needs git calls)
    - ln -s ${VISPY_DIR}/../.coverage ${SRC_DIR}/.coverage


before_script:
    # We need to create a (fake) display on Travis, let's use a funny resolution
    - export DISPLAY=:99.0
    - /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render


script:
    - cd ${VISPY_DIR}/../
    - # Nose-timer has bugs on 3+ as of Jan 2014
    - if [ "${PYTHON}" == "2.7" ]; then
        nosetests -x --with-timer --timer-top-n 10;
      else
        nosetests;
      fi
    # Require strict adherence to PEP8 and pyflakes (can use "# noqa" to skip)
    - cd ${SRC_DIR}
    - make flake


after_success:
    # Need to run from source dir to execute appropriate "git" commands
    # Let's use the "full" test case for coveralls, best case for coverage
    - if [ "${PYTHON}" == "2.7" ] && [ "${DEPS}" == "full" ]; then
        echo "Running coveralls";
        cd ${SRC_DIR};
        coveralls;
      fi;
